version: "3.8"

services:
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    env_file:
      - .env
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    volumes:
      - mongodbdata:/data/db

  fastapi_app:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: fastapi_app
    restart: always
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app

  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      retries: 5

  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - miniodata:/data
    depends_on:
      postgres:
        condition: service_healthy

  telegram_bot:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    volumes:
      - .:/app

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PG_ADMIN_USERNAME}
      PGADMIN_DEFAULT_PASSWORD: ${PG_ADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmindata:/data

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A services.background_task_service.celery_methods worker --loglevel=info
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
    restart: always
    env_file:
      - .env

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery_beat
    command: celery -A services.background_task_service.celery_methods beat --loglevel=info
    depends_on:
      - redis
      - postgres
    volumes:
      - .:/app
    restart: always
    env_file:
      - .env

  flower:
    image: mher/flower
    container_name: flower
    restart: always
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
    volumes:
      - flowerdata:/data
    depends_on:
      - redis
      - celery_worker

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "9200:9200"
    volumes:
      - esdata:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.encryptedSavedObjects.encryptionKey=${ELASTIC_ENCRYPTED_KEY}
    depends_on:
      - elasticsearch

volumes:
  pgdata:
  miniodata:
  pgadmindata:
  flowerdata:
  mongodbdata:
  esdata: