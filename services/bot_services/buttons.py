from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand

from constants.constants import PRO_SUB_COST


class ButtonOrchestrator:
    @classmethod
    def set_buttons_for_quiz_starting(cls):
        button_list = [
            [
                InlineKeyboardButton(
                    text=f"–î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π —Ñ–∞–π–ª",
                    callback_data="start_quiz_with_new_file",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ª–æ–≤–∞",
                    callback_data="start_quiz_with_users_previous_file",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–†—ñ–≤–µ–Ω—å —Å–ª—ñ–≤ A1‚ÄìA2 üá∫üá∏üá∫üá¶",
                    callback_data="start_quiz_with_a2_words",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–†—ñ–≤–µ–Ω—å —Å–ª—ñ–≤ B1‚ÄìB2 üá∫üá∏üá∫üá¶",
                    callback_data="start_quiz_with_b1_words",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–°–õ–û–í–ê –î–õ–Ø –ü–û–ë–£–¢–£ üè°",
                    callback_data="start_quiz_with_topic_words",
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=button_list)

    @classmethod
    def set_subscription_buttons(cls):
        button_list = [
            [
                InlineKeyboardButton(
                    text=f" –ü—ñ–¥–ø–∏—Å–∫–∞ 'Pro' [info]    ({PRO_SUB_COST}$)",
                    callback_data="process_pro_subscription",
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=button_list)

    @classmethod
    async def set_menu_buttons(cls, bot: Bot):
        commands = [
            BotCommand(command="start", description="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É"),
            BotCommand(command="stop_quiz", description="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É"),
            BotCommand(command="instruction", description="üìñ –ü—Ä–∞–≤–∏–ª–∞"),
            BotCommand(command="help", description="ü§• –ó–Ω–∞–π—à–æ–≤ –ø—Ä–æ–±–ª–µ–º—É.."),
        ]
        await bot.set_my_commands(commands)

    @classmethod
    def generate_word_buttons(cls):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí° –ü—ñ–¥–∫–∞–∑–∫–∞", callback_data="get_hint"),
                    InlineKeyboardButton(
                        text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_word"
                    ),
                    InlineKeyboardButton(
                        text="üéôÔ∏è –ü–æ—Å–ª—É—Ö–∞—Ç–∏", callback_data="listen_word"
                    ),
                ]
            ]
        )
