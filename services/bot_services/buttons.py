from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand

from constants.constants import SIMPLE_SUB_COST, START_SUB_COST, PRO_SUB_COST
from models import UserSubscriptionLevels


class ButtonOrchestrator:
    @classmethod
    def set_buttons_for_quiz_starting(
            cls, level: UserSubscriptionLevels = UserSubscriptionLevels.PRO
    ):
        NEED_SUB = "(üí∏)"
        STATUS_OK = ""

        button_list = [
            [
                InlineKeyboardButton(
                    text=f"–î–æ–¥–∞—Ç–∏ —Å–≤—ñ–π —Ñ–∞–π–ª {NEED_SUB if level == UserSubscriptionLevels.NON_SUBSCRIPTION else STATUS_OK}",
                    callback_data="start_quiz_with_new_file",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å–ª–æ–≤–∞ {NEED_SUB if level == UserSubscriptionLevels.NON_SUBSCRIPTION else STATUS_OK}",
                    callback_data="start_quiz_with_users_previous_file",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–†—ñ–≤–µ–Ω—å —Å–ª—ñ–≤ A1‚ÄìA2 üá∫üá∏üá∫üá¶ {STATUS_OK if level in [UserSubscriptionLevels.START, UserSubscriptionLevels.PRO, UserSubscriptionLevels.FREE_TERM, UserSubscriptionLevels.PROMOCODE] else NEED_SUB}",
                    callback_data="start_quiz_with_a2_words",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–†—ñ–≤–µ–Ω—å —Å–ª—ñ–≤ B1‚ÄìB2 üá∫üá∏üá∫üá¶ {STATUS_OK if level in [UserSubscriptionLevels.PRO, UserSubscriptionLevels.FREE_TERM, UserSubscriptionLevels.PROMOCODE] else NEED_SUB}",
                    callback_data="start_quiz_with_b1_words",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"–°–õ–û–í–ê –î–õ–Ø –ü–û–î–û–†–û–ñ–ï–ô ‚úàÔ∏è {STATUS_OK if level in [UserSubscriptionLevels.START, UserSubscriptionLevels.PRO, UserSubscriptionLevels.FREE_TERM, UserSubscriptionLevels.PROMOCODE] else NEED_SUB}",
                    callback_data="start_quiz_with_travel_words",
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=button_list)

    @classmethod
    def set_subscription_buttons(cls):
        button_list = [
            [
                InlineKeyboardButton(
                    text=f"1Ô∏è‚É£ –ü—ñ–¥–ø–∏—Å–∫–∞ 'Simple' [info]   ({SIMPLE_SUB_COST}$)",
                    callback_data="process_simple_subscription",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"2Ô∏è‚É£ –ü—ñ–¥–ø–∏—Å–∫–∞ 'Start' [info]    ({START_SUB_COST}$)",
                    callback_data="process_start_subscription",
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"3Ô∏è‚É£ –ü—ñ–¥–ø–∏—Å–∫–∞ 'Pro' [info]    ({PRO_SUB_COST}$)",
                    callback_data="process_pro_subscription",
                )
            ],
        ]
        return InlineKeyboardMarkup(inline_keyboard=button_list)

    @classmethod
    async def set_menu_buttons(cls, bot: Bot):
        commands = [
            BotCommand(command="start", description="‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏ –≥—Ä—É"),
            BotCommand(command="instruction", description="üìñ –ü—Ä–∞–≤–∏–ª–∞"),
            BotCommand(command="help", description="üôè –î–æ–ø–æ–º–æ–≥–∞"),
            BotCommand(command="add_promocode", description="üî• –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥"),
            BotCommand(command="stop_quiz", description="üõë –ó—É–ø–∏–Ω–∏—Ç–∏ –≥—Ä—É"),
        ]
        await bot.set_my_commands(commands)

    @classmethod
    def generate_word_buttons(cls):
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí° –ü—ñ–¥–∫–∞–∑–∫–∞", callback_data="get_hint"),
                    InlineKeyboardButton(
                        text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏", callback_data="skip_word"
                    ),
                ]
            ]
        )
